/*
Question No. 3191
Minimum Operations to Make Binary Elements to 1

You are given a
binary array
nums.

You can do the following operation on the array any number of times (possibly zero):

    Choose any 3 consecutive elements from the array and flip all of them.

Flipping an element means changing its value from 0 to 1, and from 1 to 0.

Return the minimum number of operations required to make all elements in nums equal to 1. If it is impossible, return -1.

 

Example 1:

Input: nums = [0,1,1,1,0,0]

Output: 3

Explanation:
We can do the following operations:

    Choose the elements at indices 0, 1 and 2. The resulting array is nums = [1,0,0,1,0,0].
    Choose the elements at indices 1, 2 and 3. The resulting array is nums = [1,1,1,0,0,0].
    Choose the elements at indices 3, 4 and 5. The resulting array is nums = [1,1,1,1,1,1].

Example 2:

Input: nums = [0,1,1,1]

Output: -1

Explanation:
It is impossible to make all elements equal to 1.

 

Constraints:

    3 <= nums.length <= 105
    0 <= nums[i] <= 1


*/
/*
My Approach:

no the window size should be 3.
If the length of the array is 8
the maximum length of the starting point of the window should be: (8-3)=5.


*/
class Solution {
    public int minOperations(int[] nums) {
        int n=nums.length;

        int ans=0;
        for(int i=0;i<n-2;i++){
            //from this much only it should move window for k
            if(nums[i]==1)continue;

            //After encountering first 0

            for(int j=i;j<=i+2;j++){//window size
                nums[j]=nums[j]^1;
            }
            ans++;
        }        

        if(nums[n-1]==0 || nums[n-2]==0) return -1;

        return ans;
    }
}
